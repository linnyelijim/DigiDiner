<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>DigiDiner</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <%- include('partials/session') %>
</head>

<body>
    <header>
        <%- include('partials/head') %>
    </header>
    <!-- clock.ejs -->
    <main>
        <div class="container">
            <div class="text-center mt-4">
                <h1>Time Clock</h1>
                <h3>Welcome, <%= employee.nameFirst %>
                        <%= employee.nameLast %> (ID: <%= employee.id %>)</h3>
            </div>

            <div class="text-center mt-4">
                <h4>Current Status:</h4>
                <p><strong id="status">
                        <%= activePeriod ? 'Clocked In' : 'Clocked Out' %>
                    </strong></p>
            </div>

            <div class="text-center mt-4">
                <% if (activePeriod) { %>
                    <button id="clockBtn" class="btn btn-primary" type="button"
                        onclick="showConfirmationModal('clockOut')">Clock Out</button>
                <% } else { %>
                    <button id="clockBtn" class="btn btn-primary" type="button"
                        onclick="showConfirmationModal('clockIn')">Clock In</button>
                <% } %>
            </div>

            <div class="text-center mt-4">
                <h3>Timestamp Punches</h3>
                <h4>Current Week:</h4>
                <p><strong id="currentDisplayDate">Loading...</strong></p>
                <div class="timestamp-table-container">
                    <table id="punchRecordTable" class="table">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="punchRecord">
                            <!-- The timestamp records will be displayed here -->
                        </tbody>
                    </table>
                </div>
                <div class="timestamp-navigation">
                    <button class="btn btn-primary" onclick="showPrevWeek()">Prev</button>
                    <button class="btn btn-primary" onclick="showNextWeek()">Next</button>
                </div>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog"
            aria-labelledby="confirmationModalTitle" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmationModalTitle"></h5>
                        <button type="button" class="close" onclick="cancelAction()" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to <span id="statusAction">
                                <%= activePeriod ? 'Clocked In' : 'Clocked Out' %>
                            </span>? This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="cancelAction()" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="confirmAction()">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script src="/js/jquery.min.js"></script>
    <script src="/js/bootstrap.bundle.min.js"></script>
    <script>
        var clockedIn = <%= Boolean(activePeriod) %>;
        var periods = JSON.parse('<%- JSON.stringify(periods) %>');

        // Filter timestamps for the current week
        const dateObject = new Date(Date.now());
        dateObject.setDate(dateObject.getDate() - (dateObject.getDay() >= 1 ? dateObject.getDay() - 1 : 6 - dateObject.getDay()))
        dateObject.setHours(0,0,0,0);

        const startOfCurrentWeek = dateObject.getTime();
        const endOfCurrentWeek = startOfCurrentWeek + 7 * 24 * 60 * 60 * 1000 - 1;

        var startOfWeek = startOfCurrentWeek;
        var endOfWeek = endOfCurrentWeek;

        function showConfirmationModal(action) {
            // Show the confirmation modal
            $('#confirmationModalTitle').text(`Confirm ${clockedIn ? 'Clock Out' : 'Clock In'}`);
            $('#statusAction').text(clockedIn ? 'Clock Out' : 'Clock In');
            $('#confirmationModal').modal('show');
        }

        // Function to handle the cancellation
        function cancelAction() {
            $('#confirmationModal').modal('hide');
        }

        // Function to handle the confirmation
        async function confirmAction() {
            clockedIn = !clockedIn;

            if (clockedIn) {
                await clockIn();
            } else {
                await clockOut();
            }
            
            $('#confirmationModal').modal('hide');
        }

        // Function to perform the clock in action
        async function clockIn() {
            try {
                const response = await fetch('/api/common/employee/clockin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}),
                });

                if (response.ok) {
                    $('#status').text('Clocked In');
                    $('#clockBtn').text('Clock Out');
                    const data = await response.json();
                    console.log('Clock In Successful:', data);

                    if (startOfWeek != startOfCurrentWeek) {
                        await fetchClockStatus();
                        startOfWeek = startOfCurrentWeek;
                        endOfWeek = endOfCurrentWeek;
                        await populatePunchRecords();
                    } else {
                        const timestamp = new Date(data.startTime).toLocaleString();
                        const punchItem = `
                            <tr>
                                <td>${timestamp}</td>
                                <td>Clock In</td>
                            </tr>
                        `;
                        $('#punchRecord').prepend(punchItem);
                    }
                } else {
                    console.error('Clock In Failed:', response.status);
                }
            } catch (error) {
                console.error('Clock In Failed:', error);
            }
        }

        // Function to perform the clock out action
        async function clockOut() {
            try {
                const response = await fetch('/api/common/employee/clockout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}),
                });

                if (response.ok) {
                    $('#status').text('Clocked Out');
                    $('#clockBtn').text('Clock In');
                    const data = await response.json();
                    console.log('Clock Out Successful:', data);

                    if (startOfWeek != startOfCurrentWeek) {
                        await fetchClockStatus();
                        startOfWeek = startOfCurrentWeek;
                        endOfWeek = endOfCurrentWeek;
                        await populatePunchRecords();
                    } else {
                        const timestamp = new Date(data.endTime).toLocaleString();
                        const punchItem = `
                            <tr>
                                <td>${timestamp}</td>
                                <td>Clock Out</td>
                            </tr>
                        `;
                        $('#punchRecord').prepend(punchItem);
                    }
                } else {
                    console.error('Clock Out Failed:', response.status);
                }
            } catch (error) {
                console.error('Clock Out Failed:', error);
            }
        }

        async function fetchClockStatus(limit, offset) {
            var responseBody;
            try {
                let query = `/api/common/employee/clock`;
                if (limit != null) {
                    query += `?limit=${limit}`
                    if (offset != null) {
                        query += `&limit=${offset}`
                    }
                } else if (offset != null) {
                    query += `?limit=${offset}`
                }

                const response = await fetch(query, {
                    method: 'GET'
                });

                if (!response.ok) {
                    console.error('Failed to fetch timestamp records:', response.status);
                    return;
                }

                responseBody = await response.json();
            } catch (error) {
                console.error('Error fetching timestamp records:', error);
                return;
            }

            clockedIn = responseBody.clockedIn;
            periods = responseBody.periods;
            periods.sort((a, b) => b.startTime - a.startTime);
        }

        // Function to display the timestamp records for the current week
        async function populatePunchRecords() {
            const currentWeekTimestamps = periods.filter(period =>
                period.startTime >= startOfWeek && period.startTime <= endOfWeek
            );
            const punchRecordTable = document.getElementById('punchRecord');
            punchRecordTable.innerHTML = '';

            currentWeekTimestamps.forEach(period => {
                if (period.endTime) {
                    const punchItemEnd = `
                        <tr>
                            <td>${new Date(period.endTime).toLocaleString()}</td>
                            <td>Clock Out</td>
                        </tr>
                    `;
                    $('#punchRecord').append(punchItemEnd);
                }

                const punchItemStart = `
                    <tr>
                        <td>${new Date(period.startTime).toLocaleString()}</td>
                        <td>Clock In</td>
                    </tr>
                `;
                $('#punchRecord').append(punchItemStart);
            });

            // Update the current display date with the first and last timestamp records of the week
            const firstTimestamp = currentWeekTimestamps[0]?.startTime;
            const lastTimestamp = currentWeekTimestamps[currentWeekTimestamps.length - 1]?.startTime;
            if (firstTimestamp && lastTimestamp) {
                const firstDayOfWeek = new Date(firstTimestamp);
                firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay());
                const lastDayOfWeek = new Date(lastTimestamp);
                lastDayOfWeek.setDate(lastDayOfWeek.getDate() + (6 - lastDayOfWeek.getDay()));
                $('#currentDisplayDate').text(
                    firstDayOfWeek.toLocaleDateString('en-us', { month: 'long', day: 'numeric' }) +
                    ' - ' + lastDayOfWeek.toLocaleDateString('en-us', { month: 'long', day: 'numeric' })
                );
            } else {
                $('#currentDisplayDate').text('No timestamp records found for this week');
            }
        }

        async function showPrevWeek() {
            await fetchClockStatus();

            startOfWeek -= 7 * 24 * 60 * 60 * 1000;
            endOfWeek -= 7 * 24 * 60 * 60 * 1000;

            await populatePunchRecords();
        }

        async function showNextWeek() {
            await fetchClockStatus();

            startOfWeek += 7 * 24 * 60 * 60 * 1000;
            endOfWeek += 7 * 24 * 60 * 60 * 1000;

            await populatePunchRecords();
        }
        // Call the function to display the timestamp records for the current week
        populatePunchRecords();

    </script>
    <footer>
        <%- include('partials/footer') %>
    </footer>
</body>

</html>